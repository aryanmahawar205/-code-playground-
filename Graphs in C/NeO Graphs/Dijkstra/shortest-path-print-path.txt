#include <stdio.h>
#include <limits.h>

#define MAX_INTERSECTIONS 100

int minDistance(int distance[], int visited[], int intersections) {
    int min = INT_MAX, min_index;

    for (int v = 0; v < intersections; v++) {
        if (!visited[v] && distance[v] <= min) {
            min = distance[v];
            min_index = v;
        }
    }

    return min_index;
}

void printPath(int parent[], int j) {
    if (parent[j] == -1)
        return;

    printPath(parent, parent[j]);
    printf(" -> %d", j);
}

void printSolution(int distance[], int parent[], int src, int dest) {
    printf("Shortest path: %d\n", distance[dest]);
    printf("Path: %d", src);
    printPath(parent, dest);
    printf("\n");
}

void dijkstra(int graph[MAX_INTERSECTIONS][MAX_INTERSECTIONS], int intersections, int src, int dest) {
    int distance[MAX_INTERSECTIONS];
    int parent[MAX_INTERSECTIONS];
    int visited[MAX_INTERSECTIONS];

    for (int i = 0; i < intersections; i++) {
        distance[i] = INT_MAX;
        parent[i] = -1;
        visited[i] = 0;
    }

    distance[src] = 0;

    for (int count = 0; count < intersections - 1; count++) {
        int u = minDistance(distance, visited, intersections);
        visited[u] = 1;

        for (int v = 0; v < intersections; v++) {
            if (!visited[v] && graph[u][v] && distance[u] != INT_MAX &&
                (distance[u] + graph[u][v] < distance[v])) {
                distance[v] = distance[u] + graph[u][v];
                parent[v] = u;
            }
        }
    }

    printSolution(distance, parent, src, dest);
}

int main() {
    int intersections, src, dest;

    scanf("%d", &intersections);

    int graph[MAX_INTERSECTIONS][MAX_INTERSECTIONS];

    for (int i = 0; i < intersections; i++) {
        for (int j = 0; j < intersections; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    scanf("%d", &src);
    scanf("%d", &dest);

    dijkstra(graph, intersections, src, dest);

    return 0;
}