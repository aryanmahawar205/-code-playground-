#include <stdio.h>
#include <limits.h>

#define MAX_CITIES 100

void dijkstra(int graph[MAX_CITIES][MAX_CITIES], int n, int source, int distances[MAX_CITIES]) {
    int visited[MAX_CITIES] = {0};

    for (int i = 0; i < n; i++) {
        distances[i] = INT_MAX;
    }

    distances[source] = 0;

    for (int count = 0; count < n - 1; count++) {
        int u = -1;

        for (int i = 0; i < n; i++) {
            if (!visited[i] && (u == -1 || distances[i] < distances[u])) {
                u = i;
            }
        }

        visited[u] = 1;

        for (int v = 0; v < n; v++) {
            if (!visited[v] && graph[u][v] && distances[u] != INT_MAX
                && distances[u] + graph[u][v] < distances[v]) {
                distances[v] = distances[u] + graph[u][v];
            }
        }
    }
}

int main() {
    int n, m; // Number of cities and roads
    scanf("%d %d", &n, &m);

    int graph[MAX_CITIES][MAX_CITIES] = {0};
    int u, v, w; // Road from u to v with weight w

    for (int i = 0; i < m; i++) {
        scanf("%d %d %d", &u, &v, &w);
        graph[u][v] = w;
    }

    int source; // Starting city
    scanf("%d", &source);

    int distances[MAX_CITIES];
    dijkstra(graph, n, source, distances);

    for (int i = 0; i < n; i++) {
        if (i == source) {
            continue;
        }
        if (distances[i] == INT_MAX) {
            printf("City %d: Not reachable\n", i);
        } else {
            printf("City %d: %d units\n", i, distances[i]);
        }
    }

    return 0;
}