#include <stdio.h>
#include <limits.h>

#define MAX_V 10

int minKey(int key[], int mstSet[], int V) {
    int min = INT_MAX, min_index;
    int v;
    for (v = 0; v < V; v++)
        if (mstSet[v] == 0 && key[v] < min)
            min = key[v], min_index = v;

    return min_index;
}

int printMST(int parent[], int n, int graph[MAX_V][MAX_V]) {
    int i;
    printf("Edge   Weight\n");
    for (i = 1; i < n; i++)
        printf("%d - %d    %d\n", parent[i], i, graph[i][parent[i]]);
}

void primMST(int graph[MAX_V][MAX_V], int V) {
    int parent[MAX_V];
    int key[MAX_V], i, v, count;
    int mstSet[MAX_V];

    for (i = 0; i < V; i++)
        key[i] = INT_MAX, mstSet[i] = 0;

    key[0] = 0;
    parent[0] = -1;

    for (count = 0; count < V - 1; count++) {
        int u = minKey(key, mstSet, V);
        mstSet[u] = 1;

        for (v = 0; v < V; v++) {
            if (graph[u][v] && mstSet[v] == 0 && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }

    printMST(parent, V, graph);
}

int main() {
    int V;
    scanf("%d", &V);

    int graph[MAX_V][MAX_V];

    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    primMST(graph, V);

    return 0;
}