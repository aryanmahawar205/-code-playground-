#include <stdio.h>
#define V 100

int isBipartite(int G[][V], int src, int n)
{
    int colorArr[V];
    for (int i = 0; i < n; ++i)
        colorArr[i] = -1;

    colorArr[src] = 1;

    int queue[V];
    int front = -1;  // Pointer to the front of the queue
    int rear = -1;   // Pointer to the rear of the queue

    queue[++rear] = src;

    while (front != rear)
    {
        int u = queue[++front];

        if (G[u][u] == 1)
            return 0;

        for (int v = 0; v < n; ++v)
        {
            if (G[u][v] && colorArr[v] == -1)
            {
                colorArr[v] = 1 - colorArr[u];
                queue[++rear] = v;
            }
            else if (G[u][v] && colorArr[v] == colorArr[u])
                return 0;
        }
    }

    return 1;
}

int main()
{
    int n;
    scanf("%d", &n);

    int G[V][V];
    for (int i = 0; i < n; ++i)
    {
        for (int j = 0; j < n; ++j)
        {
            scanf("%d", &G[i][j]);
        }
    }

    int src;
    scanf("%d", &src);

    if (isBipartite(G, src, n))
        printf("Yes, the given graph is Bipartite");
    else
        printf("No, the given graph is not Bipartite");

    return 0;
}